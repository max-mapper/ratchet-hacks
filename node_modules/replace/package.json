{
  "name": "replace",
  "description": "Command line search and replace utility",
  "version": "0.1.11",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "main": "replace.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/replace.git"
  },
  "dependencies": {
    "nomnom": "1.5.x",
    "colors": "0.5.x"
  },
  "bin": {
    "replace": "./bin/replace.js",
    "search": "./bin/search.js"
  },
  "keywords": [
    "sed",
    "grep"
  ],
  "readme": "# replace\n`replace` is a command line utility for performing search-and-replace on files. It's similar to sed but there are a few differences:\n\n* Modifies files when matches are found\n* Recursive search on directories with -r\n* Uses [JavaScript syntax](https://developer.mozilla.org/en/JavaScript/Guide/Regular_Expressions#Using_Simple_Patterns) for regular expressions and [replacement strings](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter).\n\n# Install\nWith [node.js](http://nodejs.org/) and [npm](http://github.com/isaacs/npm):\n\n\tnpm install replace -g\n\n\n## Examples\n\nReplace all occurrences of \"var\" with \"let\" in files in the current directory:\n\n```\nreplace 'var' 'let' *\n```\n\nReplace in all files in a recursive search of the current directory:\n\n```\nreplace 'var' 'let' . -r\n```\n\nReplace only in test/file1.js and test/file2.js:\n\n```\nreplace 'var' 'let' test/file1.js test/file2.js\n```\n\nReplace all word pairs with \"_\" in middle with a \"-\":\n\n```\nreplace '(\\w+)_(\\w+)' '$1-$2' *\n```\n\nReplace only in files with names matching *.js:\n\n```\nreplace 'var' 'let' . -r --include=\"*.js\"\n```\n\nDon't replace in files with names matching *.min.js and *.py:\n\n```\nreplace 'var' 'let' . -r --exclude=\"*.min.js,*.py\"\n```\n\nPreview the replacements without modifying any files:\n\n```\nreplace 'var' 'let' . -r --preview\n```\n\nSee all the options:\n\n```\nreplace -h\n```\n\n# More Details\n\n### Search\nThere's also a `search` command. It's like `grep`, but with `replace`'s syntax, and slower!\n\n```\nsearch \"setTimeout\" . -r\n```\n\n### Excludes\nBy default, `replace` and `search` will exclude files (binaries, images, etc) that match patterns in the `\"defaultignore\"` located in this directory.\n\n### On huge directories\nIf `replace` is taking too long on a large directory, try turning on the quiet flag with `-q`, only including the necessary file types with `--include` or limiting the lines shown in a preview with `-n`.\n\n\n### What it looks like\n![replace](http://i.imgur.com/qmJjS.png)\n\n",
  "_id": "replace@0.1.11",
  "dist": {
    "shasum": "62aaa8e2149dadbbb075da31ff9b729f949e49bf"
  },
  "_from": "replace"
}
